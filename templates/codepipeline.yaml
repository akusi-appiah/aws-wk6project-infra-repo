Description: "AWS CodePipeline for ECS Deployment"

Parameters:
  ECSAppName: { Type: String }
  ECRRepoName: { Type: String }
  ContainerName: { Type: String }
  ContainerPort: { Type: Number }
  TaskDefinitionArn: { Type: String }
  CodeDeployApplication: { Type: String }  
  ArtifactsBucketName: { Type: String }
  ECSClusterName: { Type: String }
  ECSServiceName: { Type: String }

Resources:
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub codepipeline-${ECSAppName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecs:*
                  - codedeploy:*
                  - s3:*
                  - codebuild:*
                Resource: "*"

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ECSAppName}-deployment
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: ECR_Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                RepositoryName: !Ref ECRRepoName
                ImageTag: latest
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

        - Name: Build
          Actions:
          - Name: Update-Service-Count
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            Configuration:
              ProjectName: !Ref ServiceUpdateBuilder
            InputArtifacts:
              - Name: SourceOutput
            OutputArtifacts:
              - Name: BuildOutput 
            RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: CodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Sub ${ECSAppName}-dg
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  ServiceUpdateBuilder:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ECSAppName}-service-updater
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: ECS_CLUSTER
            Value: !Ref ECSClusterName
          - Name: ECS_SERVICE
            Value: !Ref ECSServiceName
          - Name: TASK_DEFINITION_FAMILY
            Value: !Sub ${ECSAppName}-task
          - Name: CONTAINER_NAME
            Value: !Ref ContainerName
          - Name: CONTAINER_PORT
            Value: !Ref ContainerPort
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                # 1. Update service count if needed
                - CURRENT_DESIRED=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].desiredCount' --output text)
                - |
                  if [ "$CURRENT_DESIRED" -eq 0 ]; then
                    echo "Updating desired count to 2"
                    aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --desired-count 2
                  fi
                
                # 2. Get image URI from source artifact
                - IMAGE_URI=$(cat imageDetail.json | jq -r '.ImageURI')
                - echo "New image URI: $IMAGE_URI"
                
                # 3. Get current task definition
                - TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query 'taskDefinition.taskDefinitionArn' --output text)
                - echo "Current task definition: $TASK_DEFINITION_ARN"
                
                # 4. Create new task definition
                - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY)
                - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_URI" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
                
                # 5. Register new task definition
                - NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
                - echo "New task definition ARN: $NEW_TASK_ARN"
                
                # 6. Generate AppSpec file
                - |
                  cat <<EOF > appspec.yaml
                  version: 0.0
                  Resources:
                    - TargetService:
                        Type: AWS::ECS::Service
                        Properties:
                          TaskDefinition: "$NEW_TASK_ARN"
                          LoadBalancerInfo:
                            ContainerName: "$CONTAINER_NAME"
                            ContainerPort: $CONTAINER_PORT
                  EOF
                  
                # 7. Output for debugging
                - cat appspec.yaml
        
        artifacts:
          files: 
            - appspec.yaml

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTaskDefinition
                  - ecs:RegisterTaskDefinition
                Resource: "*"
              - Effect: Allow
                Action: ecs:DescribeClusters
                Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSClusterName}

Outputs:
  PipelineName:
    Value: !Ref Pipeline