Description: 'ALB, Target Groups and Listener infrastructure'

Parameters:
  VpcId: { Type: String }
  PublicSubnetIds: { Type: CommaDelimitedList }
  ContainerPort: { Type: Number }
  ECSAppName: { Type: String }
  AlbSecurityGroup: { Type: String }

Resources:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ECSAppName}-alb
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [!Ref AlbSecurityGroup]
      Type: application
      IpAddressType: ipv4

  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ECSAppName}-blue-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"

  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ECSAppName}-green-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup

Outputs:
  ALBDnsName:
    Value: !GetAtt ALB.DNSName
  BlueTargetGroupArn:
    Value: !Ref BlueTargetGroup
  GreenTargetGroupArn:
    Value: !Ref GreenTargetGroup
  BlueTargetGroupName:
    Value: !Ref BlueTargetGroup
  GreenTargetGroupName:
    Value: !Ref GreenTargetGroup
  AlbListenerArn:
    Value: !Ref AlbListener